[{"content":"import { render, screen } from '@testing-library/react';\n\nfunction ColorList() {\n  return (\n    <ul>\n      <li>Red</li>\n      <li>Blue</li>\n      <li>Green</li>\n    </ul>\n  )\n}\n\nrender(<ColorList />)","type":"code","id":"018a3"},{"content":"test('getBy, queryBy, findBy finding 0 elements', async () => {\n  render(<ColorList />);\n\n  expect(\n    () => screen.getByRole('textbox')\n  ).toThrow();\n\n  expect(screen.queryByRole('textbox')).toEqual(null);\n\n  let errorThrown = false;\n  try {\n    await screen.findByRole('textbox');\n  } catch (err) {\n    errorThrown = true;\n  }\n  expect(errorThrown).toEqual(true)\n})","type":"code","id":"svvzd"},{"content":"test('getBy, queryBy, findBy when they find 1 element', async () => {\n  render(<ColorList />);\n\n  expect(\n    screen.getByRole('list')\n  ).toBeInTheDocument();\n\n  expect(\n    screen.queryByRole('list')\n  ).toBeInTheDocument()\n\n  expect(\n    await screen.findByRole('list')\n  ).toBeInTheDocument()\n})","type":"code","id":"iqhze"},{"content":"test('getby, queryBy, findBy when finding > 1 elements', async () => {\n  render(<ColorList />);\n\n  expect(\n    () => screen.getByRole('listitem')\n  ).toThrow();\n\n  expect(() => screen.queryByRole('listitem')).toThrow();\n\n  let errorThrown = false;\n  try {\n    await screen.findByRole('listitem');\n  } catch (err) {\n    errorThrown = true;\n  }\n  expect(errorThrown).toEqual(true)\n})","type":"code","id":"4zemn"},{"content":"test('getAll, queryAllBy, findAllBy', async () => {\n  render(<ColorList />)\n\n  expect(\n    screen.getAllByRole('listitem')\n  ).toHaveLength(3)\n\n  expect(\n    screen.queryAllByRole('listitem')\n  ).toHaveLength(3)\n\n  expect(\n    await screen.findAllByRole('listitem')\n  ).toHaveLength(3);\n})","type":"code","id":"tlirm"},{"content":"test('favor using getby to prove an element exists', async () => {\n  render(<ColorList />)\n\n  const element = screen.getByRole('list');\n\n  expect(element).toBeInTheDocument();\n})","type":"code","id":"hsjne"},{"content":"test('favor queryBy when proving an element does not exist', async () => {\n  render(<ColorList />)\n\n  const element = screen.queryByRole('textbox');\n\n  expect(element).not.toBeInTheDocument();\n})","type":"code","id":"88jvs"},{"content":"import { useState, useEffect } from 'react'\n\nfunction fakeFetchColors() {\n  return Promise.resolve(\n    ['red', 'green', 'blue']\n  );\n}\n\nfunction LoadableColorList() {\n  const [colors, setColors] = useState([]);\n\n  useEffect(() => {\n    fakeFetchColors().then(c => setColors(c))\n  }, []);\n\n  const renderedColors = colors.map(color => {\n    return <li key={color}>{color}</li>\n  });\n\n  return <ul>{renderedColors}</ul>\n}\n\nrender(<LoadableColorList />)","type":"code","id":"816x0"},{"content":"test('Favor findBy or findAllBy when data fetching', async () => {\n  render(<LoadableColorList />)\n\n  // findAllByRole will try to find listitem a few times because it knows\n  // that the data takes some time to fetch & render\n  const els = await screen.findAllByRole('listitem');\n\n  expect(els).toHaveLength(3)\n})","type":"code","id":"265ef"}]